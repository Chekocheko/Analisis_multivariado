install.packages(c("stringr", "tidyverse", "lme4", "lmerTest", "ggExtra", "IRkernel", "IRdisplay", "languageserver", "httpgd", "car", "e1071", "ggpubr", "caret"))
install.packages(c("quarto", "xaringan", "xaringanExtra", "xaringanthemer"))
install.packages("pacman")
plot(1:10)
help("plot")
plot(10:20)
plot()
plot
UseMethod("plot")
plot(1:10, type = "l")
plot(1:10, type = "l", main = "Grafico de linea")
plot(1:10, type = "l", main = 'Grafico de linea')
require(graphics)
require(minpack.lm)
cars
plot(cars)
plot(
x=1:10
)
?package.skeleton
## two functions and two "data sets" :
f <- function(x, y) x+y
g <- function(x, y) x-y
d <- data.frame(a = 1, b = 2)
e <- rnorm(1000)
package.skeleton(list = c("f","g","d","e"), name = "mypkg")
plot(1:10, type = "l", main = "Grafico de linea")
plot(1:10, type = "l", main = "Grááááfico de linea")
"Hello world"
"Hello world"
7 + 8
suma_ab <- 7 + 8
suma_ab = 7 + 8
suma_ab_igual = 7 + 8
10/2
# a <- 9
a <- 6
b <- 7
a / 2
a * 3 # multiplicación
sqrt(9)
vec_a <- c(6, 7, 8, 9, 10) # asignar, crear vector
sqrt(vec_a)
sqrt(9)
sqrt(vec_a)
sum(vec_a)
sum_vec <- 0
for (i in 1:length(vec_a)) {
sum_vec <- vec_a[i] + sum_vec
}
sum_vec
help("+")
a
a^2
vec_a
vec_a^2
vec_a_cuad <- vec_a^2
vec_a**2
a %% 3
b %% 3
sum(vec_a)
mean(x = vec_a)
sum(vec_a) / length(vec_a)
mean(x = vec_a)
sd(x = vec_a)
c(vec_a, NA)
vec_a <- c(vec_a, NA)
sd(x = vec_a)
5 + NA
sd(x = vec_a, na.rm = TRUE)
?install.packages
# Instalar paquetes
## No correr aun, tarda mucho
# install.packages("tidyverse")
install.packages('ggExtra')
# NO CORRER
pck <- c("tidyverse", "caret")
# NO CORRER
pck <- c("tidyverse", "caret", "gridExtra", "car")
# NO CORRER
pck <- c("caret", "gridExtra", "car")
install.packages(pck)
library(tidyverse)
1L          # entero
1.0         # numérico
class(1L)
class(1.0)
object.size(1.0)
object.size(1L)
object.size(c(1L, 2L, 3L))
object.size(c(1.0, 2.0, 3.0))
object.size(c(1L, 2L, 3L))
object.size(c(1.0, 2.0, 3.0))
"1"         # texto o "string"
class("1")
class(TRUE)
TRUE == 1
sum(c(TRUE, TRUE, FALSE))
FALSE == 0  # lógica
NA          # valor perdido
class(NA)
FALSE == NA
TRUE == NA
sum(c(0, NA, 1, TRUE))
sum(c(0, NA, 1, TRUE), na.rm = TRUE)
help("==")
3 == 4 #
3 < 4 # menor que
3 <= 4 # menor o igual
3 > 4 # mayor que
3 != 4 # diferente que
vec_a
a
a < vec_a
vec_a <- c(1, 2, 3, 10, 12)
a < vec_a
a <= vec_a
vec_logical <- a <= vec_a
class(vec_logical)
vec_a <- c(1, 2, 3, 10, 12)
vec_logical <- a <= vec_a
vec_a[vec_logical]
sum(vec_logical)
length(vec_logical)
rx <- rnorm(100, 10, 4)
mean(rx)
sd(rx)
setwd("~/Documents/GitHub/Analisis_multivariado/R_tutorials")
getwd()
# Vectores
vec_a <- c(1, 2, 3, 4)
class(vec_a)
# Vectores
vec_a <- c(1, 2, 3, 4, "5")
print(vec_a)
class(vec_a)
vec_a <- c(TRUE, 2, 3)
print(vec_a)
class(vec_a)
vec_a <- c(TRUE, FALSE, 2, 3)
print(vec_a)
class(vec_a)
# logico < num < chr < factor
vec_a <- c(1, 2, 3, factor(5))
class(vec_a)
# logico < num < chr < factor
vec_a <- c(1, 2, 3, factor(5), 'a')
class(vec_a)
type(vec_a)
typeof(vec_a)
as.factor(vec_a)
mat_x <- matrix(NA, nrow = 2, ncol = 2)
mat_x
mat_x <- matrix(
c(1, 2, 3, 4, 5, 6, 7, 8, 9),
ncol = 3,
byrow = TRUE
)
mat_x
mat_x <- matrix(
c(1, 2, 3, 4, 5, 6, 7, 8, 9),
ncol = 3,
byrow = FALSE
)
mat_x
mat_x <- matrix(
c(1, 2, 3, 4, 5, 6, 7, 8, 9),
ncol = 3,
byrow = TRUE
)
mat_x
mat_x[1, ]
mat_x[ ,1]
mat_x[3, 2] # tercera fila, segunda columna
mat_x
vec_primera_fila <- mat_x[1, ]
vec_primera_fila
mat_x[1, 2] <- 0
mat_x
vec_primera_fila
vec_primera_fila[3] <- 9
vec_primera_fila
mat_x
class(mat_x)
typeof(mat_x)
mat_x[1, 2]
mat_x[1, 2] <- 'cero'
mat_x
# data.frame
df_ejemplo <- data.frame(
v1 = 1:10,
v2 = letters[1:10]
)
df_ejemplo
str(df_ejemplo)
